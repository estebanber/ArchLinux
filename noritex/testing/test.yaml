AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    Noritex SAM

    Noritex SAM Project

Globals:
    Function:
        Timeout: 900
Parameters:
    Alias:
        Type: String
        Default: stage
        AllowedValues:
            - prod
            - stage
            - m1.large
        Description: Enter prod, stage

Resources:
    cartCron:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: cartCron/
            Handler: app.lambda_handler
            Runtime: python3.8
            MemorySize: 4096
            AutoPublishAlias:
                Ref: Alias
            Environment:
                Variables:
                    STAGE:
                        Ref: Alias
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: noritex
                    KEY_COLLECTION: links
                    COMPANYID: "1"
                    SENDEREMAIL: Katherine de Noritex <info@noritex.com>
            Events:
                CronSchedule:
                    Type: Schedule
                    Properties:
                        Schedule: "cron(0 14 * * ? *)"
                        Name: cron10am
                        Description: Run at 10 AM EST
                        Enabled: True
            Policies:
                - Statement:
                      - Sid: SSMDescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - ses:SendEmail
                            - ses:SendRawEmail
                        Resource: "*"
    ProformaFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: proforma/
            Handler: app.lambda_handler
            Runtime: python3.8
            MemorySize: 4096
            AutoPublishAlias:
                Ref: Alias
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    KEY_COLLECTION: "products"
                    AWS_OUTPUT_LAMBDA: ecommerce-api-ProformaFunction-mC9hbmVqUdgF
                    DEFAULT_LOGO_IMAGE: "https://cdn.worldvectorlogo.com/logos/free-logo.svg" 
            Events:
                proforma:
                    Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /proforma
                        Method: get
            Policies:
                - Statement:
                      - Sid: LambdaescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource: "*"
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::ntx-media-public/*
    exportAllDbMedia:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: exportalldbmedia/
            Handler: app.lambda_handler
            Runtime: python3.8
            MemorySize: 4096
            Layers:
                - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
            AutoPublishAlias:
                Ref: Alias
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    KEY_COLLECTION: "products"
                    MAIL_SENDER: Katherine de Noritex <info@noritex.com>
                    BASE_URL: "https://estebanber2.s3.amazonaws.com"
                    BUCKET_NAME: estebanber2
                    MAX_VIDEOS_PKG: 30
                    AWS_OUTPUT_LAMBDA: ecommerce-api-exportAllDbMedia-Slb7nPKv1xcX
            Events:
                proforma:
                    Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /exportalldbmedia
                        Method: post
            Policies:
                - Statement:
                      - Sid: LambdaescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource: "*"
                - Statement:
                      - Sid: LambdaSendEmail
                        Effect: Allow
                        Action:
                            - ses:SendEmail
                            - ses:SendTemplatedEmail
                            - ses:SendRawEmail
                            - ses:SendBulkTemplatedEmail
                        Resource: "*"
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::estebanber2/*
    GetFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: productGet/
            Handler: get.lambda_handler
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    CDN: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
            Events:
                ProductGet:
                    Type: Api 
                    Properties:
                        Path: /product
                        Method: get
    PostFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: productPut/
            Handler: put.lambda_handler
            Runtime: python3.8
            Layers:
                - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    CDN: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
                    RECOMBEE_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:recombee
                    ELASTICSEARCH_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:elasticSearch
            Events:
                ProductPost:
                    Type: Api 
                    Properties:
                        Path: /product
                        Method: post
            Policies:
                - Statement:
                      - Sid: LambdaescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource: "*"
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::estebanber2/*
    PutFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: productPut/
            Handler: put.lambda_handler
            Runtime: python3.8
            FunctionName: putFunction
            Layers:
                - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    CDN: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
                    RECOMBEE_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:recombee
                    ELASTICSEARCH_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:elasticSearch
            Events:
                ProductPut:
                    Type: Api
                    Properties:
                        Path: /product
                        Method: put
            Policies:
                - Statement:
                      - Sid: LambdaescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource: "*"
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::estebanber2/*
    DeleteFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: productDelete/
            Handler: delete.lambda_handler
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    CDN: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
                    RECOMBEE_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:recombee
                    ELASTICSEARCH_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:elasticSearch
            Events:
                ProductDelete:
                    Type: Api
                    Properties:
                        Path: /product
                        Method: delete
            Policies:
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::ntx-media-public/*
                - Statement:
                      - Sid: LambdaescribeParametersPolicy
                        Effect: Allow
                        Action:
                            - lambda:InvokeFunction
                        Resource: "*"
    ElasticSearchFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: ../elasticsearch/
            Handler: app.lambda_handler
            Runtime: python3.8
            FunctionName: elasticSearch
            Environment:
                Variables:
                    ELASTICS_ENDPOINT: "http://172.19.0.2:9200"
                    ELASTICS_PRIVATE_KEY: "ELASTICS_PRIVATE_KEY"
                    ELASTICS_ENGINE: "ELASTICS_ENGINE"
    RecombeeFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: recombee/
            Handler: app.lambda_handler
            Runtime: python3.8
            FunctionName: recombee
            Environment:
                Variables:
                    RB_APIID: "nyx-prod"
                    RB_PRIVTOK: "hYyCYWngUZ4MjFrttPyxTI1M3r7TN2BpdXa4jMdeF65zgNVadEw5dvYlsbsEEOGb"
    ImportFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: export-import/
            Handler: import.lambda_handler
            Runtime: python3.8
            FunctionName: importFunction
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    BASES3URL: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
                    KEY_COLLECTION: links 
                    MAIL_SENDER: Katherine de Noritex <info@noritex.com>
                    AWS_PRODUCT_PUT_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putFunction
                    AWS_IMPORT_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:importFunction
            Events:
                ProductDelete:
                    Type: Api
                    Properties:
                        Path: /import
                        Method: get
    ExportFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: export-import/
            Handler: export.lambda_handler
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    BASES3URL: "https://www.noritex.com"
                    S3BUCKET: "estebanber2"
                    KEY_COLLECTION: links 
            Events:
                ProductDelete:
                    Type: Api
                    Properties:
                        Path: /export
                        Method: get
            Policies:
                - Statement:
                      - Sid: S3ObjectPut
                        Effect: Allow
                        Action:
                            - s3:GetObject
                            - s3:PutObject
                            - s3:PutObjectAcl
                        Resource: arn:aws:s3:::ntx-media-public/*
    FamilyFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: families/
            Handler: families.lambda_handler
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    ASSOCIATIONS: associations
                    KEY_COLLECTION: links 
            Events:
                ProductDelete:
                    Type: Api
                    Properties:
                        Path: /families
                        Method: get
    GetFamily:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: families/
            Handler: api.get
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    KEY_COLLECTION: "links"
                    ASSOCIATIONS: "associations"
            Events:
                ProductGet:
                    Type: Api 
                    Properties:
                        Path: /family
                        Method: get
    PutFamily:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: families/
            Handler: api.put
            Runtime: python3.8
            FunctionName: putFamily
            Layers:
                - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    KEY_COLLECTION: "links"
                    ASSOCIATIONS: "associations"
            Events:
                ProductPut:
                    Type: Api
                    Properties:
                        Path: /family
                        Method: put
    DeleteFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: families/
            Handler: api.delete
            Runtime: python3.8
            Environment:
                Variables:
                    MONGO_SRV: "mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority" 
                    MONGO_DATABASE: "noritex"
                    KEY_COLLECTION: "links"
                    ASSOCIATIONS: "associations"
            Events:
                ProductDelete:
                    Type: Api
                    Properties:
                        Path: /family
                        Method: delete
    TranslateFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: app.lambda_translate
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translatePost:
                    Type: Api 
                    Properties:
                        Path: /translate
                        Method: post
            Policies:
                - Statement:
                      - Sid: TranslateTextPol
                        Effect: Allow
                        Action:
                          - "translate:TranslateText"
                        Resource: "*"
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    getTranslationsFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: api.getList
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translationGet:
                    Type: Api 
                    Properties:
                        Path: /translation
                        Method: get
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    updateTranslationFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: api.update
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translationPost:
                    Type: Api 
                    Properties:
                        Path: /translation
                        Method: post
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    searchTranslationFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: api.searchEntries
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translationPost:
                    Type: Api 
                    Properties:
                        Path: /searchtranslation
                        Method: post
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    deleteTranslationFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: api.delete
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translationDelete:
                    Type: Api 
                    Properties:
                        Path: /translation
                        Method: delete
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:DeleteItem"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    insertTranslationsFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: api.put
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                TranslationPut:
                    Type: Api 
                    Properties:
                        Path: /translation
                        Method: put
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    webTranslationsFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: web.lambda_web
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
                    BASE_FOLDER: "Prod" 
                    PAGE_LIMIT: 20 
            Events:
                translationWeb:
                    Type: Api 
                    Properties:
                        Path: /translation/{sub}
                        Method: get
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
    loginTranslationFunction:
        Type: AWS::Serverless::Function 
        Properties:
            CodeUri: translations/
            Handler: web.lambda_check
            Runtime: python3.8
            Environment:
                Variables:
                    DYNAMODB_TABLE: "translations" 
            Events:
                translationLogin:
                    Type: Api 
                    Properties:
                        Path: /translationtoken
                        Method: post
            Policies:
                - Statement:
                      - Sid: DynamoTables
                        Effect: Allow
                        Action:
                          - "dynamodb:DeleteTable"
                          - "dynamodb:CreateTable"
                          - "dynamodb:PutItem"
                          - "dynamodb:GetItem"
                          - "dynamodb:Query"
                          - "dynamodb:UpdateItem"
                          - "dynamodb:UpdateTable"
                          - "dynamodb:DescribeTable"
                          - "dynamodb:GetRecords"
                        Resource: "*"
Outputs:
    # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
    # Find out more about other implicit resources you can reference within SAM
    # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
    cartCron:
        Description: "SAM ECOMMERCE API"
        Value: !GetAtt cartCron.Arn
    ProformaFunction:
        Description: "Proforma Lambda Function ARN"
        Value: !GetAtt ProformaFunction.Arn
    ProformaFunctionIamRole:
        Description: "Implicit IAM Role created for Proforma function"
        Value: !GetAtt ProformaFunctionRole.Arn
    exportAllDbMedia:
        Description: "exportAllDbMedia Lambda Function ARN"
        Value: !GetAtt exportAllDbMedia.Arn
    ProductApi:
        Description: "API Gateway endpoint URL for Prod stage for product functions"
        Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/product/"
    GetFunction:
        Description: "Get product Lambda Function ARN"
        Value: !GetAtt GetFunction.Arn
    PostFunction:
        Description: "Post product Lambda Function ARN"
        Value: !GetAtt PostFunction.Arn
    PutFunction:
        Description: "Put product Lambda Function ARN"
        Value: !GetAtt PutFunction.Arn
    DeleteFunction:
        Description: "Delete product Lambda Function ARN"
        Value: !GetAtt DeleteFunction.Arn
    ElasticSearchFunction:
        Description: "ElasticSearchFunction Lambda Function ARN"
        Value: !GetAtt ElasticSearchFunction.Arn
    RecombeeFunction:
        Description: "Recombee Lambda Function ARN"
        Value: !GetAtt RecombeeFunction.Arn
    ImportFunction:
        Description: "Import products from file"
        Value: !GetAtt ImportFunction.Arn
    ExportFunction:
        Description: "Export products to excel file and upload to S3"
        Value: !GetAtt ExportFunction.Arn
    FamilyFunction:
        Description: "Import Families to excel file and upload to S3"
        Value: !GetAtt FamilyFunction.Arn
    TranslateFunction:
        Description: "Trnaslate texts"
        Value: !GetAtt TranslateFunction.Arn
    loginTranslationFunction:
        Description: "Login translation function"
        Value: !GetAtt loginTranslationFunction.Arn
    webTranslationsFunction:
        Description: "Translation edit web"
        Value: !GetAtt webTranslationsFunction.Arn
    insertTranslationsFunction:
        Description: "Insert translation in database"
        Value: !GetAtt insertTranslationsFunction.Arn
    deleteTranslationFunction:
        Description: "Delete translation from database"
        Value: !GetAtt deleteTranslationFunction.Arn
    updateTranslationFunction:
        Description: "Update translation in database"
        Value: !GetAtt updateTranslationFunction.Arn
    getTranslationsFunction:
        Description: "get translation function"
        Value: !GetAtt getTranslationsFunction.Arn
