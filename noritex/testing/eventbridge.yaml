AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API Gateway HTTP API to EventBridge

Globals:
  Function:
    Timeout: 900
Resources:
  # Creates an HTTP API endpoint
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: "API Gateway HTTP API to EventBridge"
        paths:
          /:
            post:
              responses:
                default:
                  description: "EventBridge response"
              x-amazon-apigateway-integration:
                integrationSubtype: "EventBridge-PutEvents"
                credentials:
                  Fn::GetAtt: [MyHttpApiRole, Arn]
                requestParameters:
                  Detail: "$request.body"
                  DetailType: productType
                  Source: WebApp
                payloadFormatVersion: "1.0"
                type: "aws_proxy"
                connectionType: "INTERNET"
  # Create the role for API Gateway access to EventBridge
  MyHttpApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: ApiDirectWriteEventBridge
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
              - events:PutEvents
              Effect: Allow
              Resource:
                - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
  
  ProductStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: ../productPutNew/statemachine/productput.json
      DefinitionSubstitutions:
        UpdateProductArn: !GetAtt UpdateProductFunction.Arn
        CreateImageArn: !GetAtt CreateImageFunction.Arn
        TranslateFieldsArn: !GetAtt TranslateFieldsFunction.Arn
      Events:
        EventBridgeTrigger:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "WebApp"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref UpdateProductFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateImageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref TranslateFieldsFunction

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../productPutNew/
      Handler: put.data_update
      Runtime: python3.8
      Layers:
        #- !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:layer:pillow:1
        - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
      Environment:
          Variables:
              MONGO_SRV: 'mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority' 
              MONGO_DATABASE: noritex
              MONGO_COLLECTION: webconfig
  CreateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../productPutNew/
      Handler: put.create_images
      Runtime: python3.8
      Layers:
        #- !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:layer:pillow:1
        - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
      Environment:
          Variables:
              MONGO_SRV: 'mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority' 
              MONGO_DATABASE: noritex
              CDN: "https://www.noritex.com"
              S3BUCKET: "estebanber3"
              RECOMBEE_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:recombee
              ELASTICSEARCH_LAMBDA: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:elasticSearch
      Policies:
          - Statement:
                - Sid: LambdaescribeParametersPolicy
                  Effect: Allow
                  Action:
                      - lambda:InvokeFunction
                  Resource: "*"
          - Statement:
                - Sid: S3ObjectPut
                  Effect: Allow
                  Action:
                      - s3:GetObject
                      - s3:PutObject
                      - s3:PutObjectAcl
                  Resource: arn:aws:s3:::estebanber3/*
  TranslateFieldsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../productPutNew/
      Handler: put.translate_product
      Runtime: python3.8
      Layers:
        #- !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:layer:pillow:1
        - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p38-Pillow:1
      Environment:
          Variables:
              MONGO_SRV: 'mongodb+srv://esteban:esteban@devtests.tydv7.mongodb.net/myFirstDatabase?retryWrites=true&w=majority' 
              MONGO_DATABASE: noritex
      Policies:
          - Statement:
                - Sid: LambdaescribeParametersPolicy
                  Effect: Allow
                  Action:
                      - lambda:InvokeFunction
                  Resource: "*"
  TranslateFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ../translations/
      Handler: app.lambda_translate
      Runtime: python3.8
      FunctionName: translate
      Environment:
          Variables:
              CUSTOM_DICTIONARY: "paginaweb"
              DYNAMODB_TABLE: "translations" 
              DATABASE_TYPE: "postgres" 
              ENDPOINT:  "translations2.cj6qtupvi1zb.us-east-2.rds.amazonaws.com" 
              PORT: "5432"
              DBUSER: "postgres"
              DBPASSWORD: "suri102014"
              REGION: "us-east-2c"
              DBNAME: "translations2"
      Events:
          translatePost:
              Type: Api 
              Properties:
                  Path: /translate
                  Method: post
      Policies:
          - Statement:
                - Sid: TranslateTextPol
                  Effect: Allow
                  Action:
                    - "translate:TranslateText"
                  Resource: "*"
          - Statement:
                - Sid: DynamoTables
                  Effect: Allow
                  Action:
                    - "dynamodb:DeleteTable"
                    - "dynamodb:CreateTable"
                    - "dynamodb:PutItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Query"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:UpdateTable"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:GetRecords"
                  Resource: "*"
Outputs:
  ApiEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com"

